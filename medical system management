import java.util.ArrayList;
import java.util.Scanner;

class Person {
    String name;
    int age;
    String address;

    public Person(String name, int age, String address) {
        this.name = name;
        this.age = age;
        this.address = address;
    }

    public void display() {
        System.out.println("Name: " + name);
        System.out.println("Age: " + age);
        System.out.println("Address: " + address);
    }
}

class Doctor extends Person {
    String specialization;

    public Doctor(String name, int age, String address, String specialization) {
        super(name, age, address);
        this.specialization = specialization;
    }

    @Override
    public void display() {
        super.display();
        System.out.println("Specialization: " + specialization);
    }
}

class Patient extends Person {
    String illness;

    public Patient(String name, int age, String address, String illness) {
        super(name, age, address);
        this.illness = illness;
    }

    @Override
    public void display() {
        super.display();
        System.out.println("Illness: " + illness);
    }
}

class Appointment {
    Doctor doctor;
    Patient patient;
    String date;

    public Appointment(Doctor doctor, Patient patient, String date) {
        this.doctor = doctor;
        this.patient = patient;
        this.date = date;
    }

    public void display() {
        System.out.println("Appointment Date: " + date);
        System.out.println("Doctor Information:");
        doctor.display();
        System.out.println("Patient Information:");
        patient.display();
    }
}

public class MedicalManagementSystem {
    static ArrayList<Doctor> doctors = new ArrayList<>();
    static ArrayList<Patient> patients = new ArrayList<>();
    static ArrayList<Appointment> appointments = new ArrayList<>();
    static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        while (true) {
            System.out.println("\nMedical Management System");
            System.out.println("1. Add Doctor");
            System.out.println("2. Add Patient");
            System.out.println("3. Schedule Appointment");
            System.out.println("4. View Appointments");
            System.out.println("5. Exit");
            System.out.print("Choose an option: ");

            int choice = scanner.nextInt();
            scanner.nextLine();  // Consume newline

            switch (choice) {
                case 1:
                    addDoctor();
                    break;
                case 2:
                    addPatient();
                    break;
                case 3:
                    scheduleAppointment();
                    break;
                case 4:
                    viewAppointments();
                    break;
                case 5:
                    System.out.println("Exiting...");
                    System.exit(0);
                default:
                    System.out.println("Invalid option! Please try again.");
            }
        }
    }

    public static void addDoctor() {
        System.out.print("Enter Doctor's Name: ");
        String name = scanner.nextLine();
        System.out.print("Enter Doctor's Age: ");
        int age = scanner.nextInt();
        scanner.nextLine();  // Consume newline
        System.out.print("Enter Doctor's Address: ");
        String address = scanner.nextLine();
        System.out.print("Enter Doctor's Specialization: ");
        String specialization = scanner.nextLine();

        doctors.add(new Doctor(name, age, address, specialization));
        System.out.println("Doctor added successfully!");
    }

    public static void addPatient() {
        System.out.print("Enter Patient's Name: ");
        String name = scanner.nextLine();
        System.out.print("Enter Patient's Age: ");
        int age = scanner.nextInt();
        scanner.nextLine();  // Consume newline
        System.out.print("Enter Patient's Address: ");
        String address = scanner.nextLine();
        System.out.print("Enter Patient's Illness: ");
        String illness = scanner.nextLine();

        patients.add(new Patient(name, age, address, illness));
        System.out.println("Patient added successfully!");
    }

    public static void scheduleAppointment() {
        System.out.println("Available Doctors:");
        for (int i = 0; i < doctors.size(); i++) {
            System.out.println((i + 1) + ". " + doctors.get(i).name + " (Specialization: " + doctors.get(i).specialization + ")");
        }

        System.out.print("Choose a Doctor (by number): ");
        int doctorIndex = scanner.nextInt() - 1;

        System.out.println("Available Patients:");
        for (int i = 0; i < patients.size(); i++) {
            System.out.println((i + 1) + ". " + patients.get(i).name + " (Illness: " + patients.get(i).illness + ")");
        }

        System.out.print("Choose a Patient (by number): ");
        int patientIndex = scanner.nextInt() - 1;

        scanner.nextLine();  // Consume newline
        System.out.print("Enter Appointment Date (YYYY-MM-DD): ");
        String date = scanner.nextLine();

        appointments.add(new Appointment(doctors.get(doctorIndex), patients.get(patientIndex), date));
        System.out.println("Appointment scheduled successfully!");
    }

    public static void viewAppointments() {
        if (appointments.isEmpty()) {
            System.out.println("No appointments scheduled.");
        } else {
            for (Appointment appointment : appointments) {
                appointment.display();
                System.out.println("-------------------------");
            }
        }
    }
}
