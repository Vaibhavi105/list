import java.security.SecureRandom;
import java.util.Scanner;

public class PasswordGenerator {

    // Define character sets
    private static final String UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    private static final String LOWER = "abcdefghijklmnopqrstuvwxyz";
    private static final String DIGITS = "0123456789";
    private static final String SPECIAL = "!@#$%^&*()-_=+[]{}|;:'\",.<>?/";

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        SecureRandom random = new SecureRandom();

        System.out.println("Welcome to Password Generator!");

        // Get password length from the user
        System.out.print("Enter the desired password length: ");
        int length = scanner.nextInt();
        scanner.nextLine();  // Consume the newline character

        // Ask user for character sets to include
        System.out.print("Include uppercase letters? (y/n): ");
        boolean includeUpper = scanner.nextLine().equalsIgnoreCase("y");

        System.out.print("Include lowercase letters? (y/n): ");
        boolean includeLower = scanner.nextLine().equalsIgnoreCase("y");

        System.out.print("Include digits? (y/n): ");
        boolean includeDigits = scanner.nextLine().equalsIgnoreCase("y");

        System.out.print("Include special characters? (y/n): ");
        boolean includeSpecial = scanner.nextLine().equalsIgnoreCase("y");

        // Generate password
        String password = generatePassword(length, includeUpper, includeLower, includeDigits, includeSpecial, random);

        // Output the generated password
        System.out.println("Generated Password: " + password);

        scanner.close();
    }

    // Method to generate a random password based on user input
    private static String generatePassword(int length, boolean includeUpper, boolean includeLower, boolean includeDigits, boolean includeSpecial, SecureRandom random) {
        StringBuilder password = new StringBuilder(length);
        String charPool = "";

        if (includeUpper) {
            charPool += UPPER;
        }
        if (includeLower) {
            charPool += LOWER;
        }
        if (includeDigits) {
            charPool += DIGITS;
        }
        if (includeSpecial) {
            charPool += SPECIAL;
        }

        if (charPool.isEmpty()) {
            throw new IllegalArgumentException("At least one character set must be selected.");
        }

        for (int i = 0; i < length; i++) {
            int index = random.nextInt(charPool.length());
            password.append(charPool.charAt(index));
        }

        return password.toString();
    }
}
